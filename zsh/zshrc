# ======================================================================
# Znap install
# ======================================================================

DOTFILES=$HOME/.dotfiles
zstyle ':znap:*' plugins-dir $DOTFILES/zsh/plugins
source $DOTFILES/zsh/zsh-snap/znap.zsh

# ======================================================================
# Plugins
# ======================================================================

znap source ohmyzsh/ohmyzsh lib/completion plugins/git
znap source zsh-users/zsh-completions
znap source zsh-users/zsh-syntax-highlighting
znap source zsh-users/zsh-history-substring-search
znap source zsh-users/zsh-autosuggestions
znap source woefe/git-prompt.zsh

znap prompt aether-zsh-theme

# ======================================================================
# Plugin Configuration
# ======================================================================

bindkey '^[[A' history-substring-search-up
bindkey '^[[B' history-substring-search-down

# ======================================================================
# Helpful aliases
# ======================================================================

# Path helpers
alias ..="cd .."

# Python debugging servers
alias serve="python -m SimpleHTTPServer"
alias maildebug="python -m smtpd -n -c DebuggingServer localhost:1025"

# ls colors
alias ls="ls --color=auto"

export PATH="$HOME/.yarn/bin:$HOME/.config/yarn/global/node_modules/.bin:$PATH"

# ======================================================================
# General settings
# ======================================================================

# Appends every command to the history file once it is executed
setopt inc_append_history

# Reloads the history whenever you use it
setopt share_history

# Case insensitive globbing
setopt extendedglob
unsetopt CASE_GLOB
unsetopt nomatch


# ======================================================================
# Mac specific settings
# ======================================================================

if [[ `uname` == "Darwin" ]]; then
  # TODO
fi

# ======================================================================
# Windows Subsystem for Linux shortcuts
# ======================================================================

if [ -f /proc/sys/fs/binfmt_misc/WSLInterop ]; then
  alias ls='LS_COLORS="ow=01;36;40" && export LS_COLORS && command ls --human-readable --group-directories-first --color=auto -I NTUSER.DAT\* -I ntuser.dat\*'
  alias pbcopy='clip.exe'
  alias pbpaste="powershell.exe Get-Clipboard | sed 's/\r$//' | sed -z '$ s/\n$//'"
  alias open="explorer.exe"
fi

# ======================================================================
# Helpful functions
# ======================================================================

# Resizes a video to a certain vertical height
# $1 = input file path
# $2 = desired vertical height
function resize {
  filename=$(echo "$1" | sed "s/\(.*\)\.\([^.]*\)$/\1/g")
  extension="mp4"
  if [ -z "$3" ]
    then extension=$(echo "$1" | sed "s/\(.*\)\.\([^.]*\)$/\2/g")
    else extension="$3"
  fi
  filters="scale=-2:$2"
  if [ "$3" = "gif" ]
  then
    filters="$filters,fps=30,split[s0][s1];[s0]palettegen=max_colors=256:reserve_transparent=0[p];[s1][p]paletteuse"
  fi
  ffmpeg -i "$1" -vf "$filters" "$filename.$2.$extension"
}

# Re-encode a video to a target size in MB.
# Example:
#    ./this_script.sh video.mp4 15
# Copied from https://stackoverflow.com/a/61146975
function resize-to {
	T_SIZE="$2" # target size in MB
	T_FILE="${1%.*}-$2MB.mp4" # filename out

	# Original duration in seconds
	O_DUR=$(\
			ffprobe \
			-v error \
			-show_entries format=duration \
			-of csv=p=0 "$1")

	# Original audio rate
	O_ARATE=$(\
			ffprobe \
			-v error \
			-select_streams a:0 \
			-show_entries stream=bit_rate \
			-of csv=p=0 "$1")

	# Original audio rate in KiB/s
	O_ARATE=$(\
			awk \
			-v arate="$O_ARATE" \
			'BEGIN { printf "%.0f", (arate / 1024) }')

	# Target size is required to be less than the size of the original audio stream
	T_MINSIZE=$(\
			awk \
			-v arate="$O_ARATE" \
			-v duration="$O_DUR" \
			'BEGIN { printf "%.2f", ( (arate * duration) / 8192 ) }')

	# Equals 1 if target size is ok, 0 otherwise
	IS_MINSIZE=$(\
			awk \
			-v size="$T_SIZE" \
			-v minsize="$T_MINSIZE" \
			'BEGIN { print (minsize < size) }')

	# Give useful information if size is too small
	if [[ $IS_MINSIZE -eq 0 ]]; then
			printf "%s\n" "Target size ${T_SIZE}MB is too small!" >&2
			printf "%s %s\n" "Try values larger than" "${T_MINSIZE}MB" >&2
			exit 1
	fi

	# Set target audio bitrate
	T_ARATE=$O_ARATE


	# Calculate target video rate - MB -> KiB/s
	T_VRATE=$(\
			awk \
			-v size="$T_SIZE" \
			-v duration="$O_DUR" \
			-v audio_rate="$O_ARATE" \
			'BEGIN { print  ( ( size * 8192.0 ) / ( 1.048576 * duration ) - audio_rate) }')

	# Perform the conversion
	ffmpeg \
			-y \
			-i "$1" \
			-c:v libx264 \
			-b:v "$T_VRATE"k \
			-pass 1 \
			-an \
			-f mp4 \
			/dev/null \
	&& \
	ffmpeg \
			-i "$1" \
			-c:v libx264 \
			-b:v "$T_VRATE"k \
			-pass 2 \
			-c:a aac \
			-b:a "$T_ARATE"k \
			$T_FILE
}
